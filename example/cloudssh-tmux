#!/bin/sh
#
# Split arguments by --:
# cloudselect arguments -- ssh arguments

function jumphost() {
  OUTPUT=$(echo $1 | base64 --decode)
  JUMPHOST=$(echo $OUTPUT | jq -r '.jumphost // ""')
  test -z "$JUMPHOST" && return

  HOST=$(echo $OUTPUT | jq -r '.jumphost.host')
  KEY="-i"$(echo $OUTPUT | jq -r '.jumphost.key // ""')
  USER=$(echo $OUTPUT | jq -r '.jumphost.user // ""')"@"

  test "$KEY" == "-i" && KEY=""
  test "$USER" == "@" && USER=""
  echo ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $OPTION_SSH $KEY $USER$HOST
}

CLOUDSELECT_ARGS=$#
if [ $CLOUDSELECT_ARGS -eq 0 ]; then
  cloudselect
  exit
fi
for (( i=1; i <= "$#"; i++ )); do
  if [ "${!i}" == "--" ]; then
    CLOUDSELECT_ARGS=$(($i-1))
    break
  fi
done
SSH_ARGS=$(($CLOUDSELECT_ARGS+2))

OUTPUT=$(cloudselect "${@:1:$CLOUDSELECT_ARGS}")
if [ $? -ne 0 ];then
  exit
fi

CLOUD=$(echo $OUTPUT | jq -r '.instances[] | @base64')
TMUX_LAYOUT=${TMUX_LAYOUT:-tiled}
TMUX_SESSION_NAME="assh-"$(date +%s)
WAIT_FOR_INPUT='read -n 1 -s -r -p "Press any key to continue"'
WINDOW=0

OPTION_AFTER=$(echo $OUTPUT | jq -r '.option.after // ""')
OPTION_BEFORE=$(echo $OUTPUT | jq -r '.option.before // ""')
OPTION_SSH=$(echo $OUTPUT | jq -r '.option.ssh // ""')
OPTION_SSH_COMMAND=$(echo $OUTPUT | jq -r '.option.ssh_command // ""')

# Collect shared arguments
for row in $(echo $CLOUD); do
    OUTPUT=$(echo ${row} | base64 --decode)
    break
done

test "$OPTION_BEFORE" != "null" && eval "$OPTION_BEFORE"
# Iterate over instances
for row in $(echo $CLOUD); do
    OUTPUT=$(echo ${row} | base64 --decode)
    HOST=$(echo $OUTPUT | jq -r '.host')
    JUMPHOST=$(jumphost $row)
    KEY="-i"$(echo $OUTPUT | jq -r '.key // ""')
    USER=$(echo $OUTPUT | jq -r '.user // ""')"@"

    test "$KEY" == "-i" && KEY=""
    test "$USER" == "@" && USER=""

    connectString="$JUMPHOST ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $OPTION_SSH $KEY $USER$HOST $OPTION_SSH_COMMAND ${@:$SSH_ARGS}"
    commandString="${connectString}; $WAIT_FOR_INPUT"

    if [ $# -ge $SSH_ARGS ];then
      echo "$JUMPHOST ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $OPTION_SSH $KEY $USER$HOST ${@:$SSH_ARGS}"
      $JUMPHOST ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $OPTION_SSH $KEY $USER$HOST ${@:$SSH_ARGS}
      continue
    fi

    tmux list-windows | grep -q "${TMUX_SESSION_NAME}"
    if [ $WINDOW -eq 0 -a $? -ne 0 ]; then
        tmux new-window -n "${TMUX_SESSION_NAME}" "$commandString"
        echo "$connectString"
    else
        tmux split-window -t "${TMUX_SESSION_NAME}" "${commandString}" && \
            echo "$connectString"
    fi
    WINDOW=$((WINDOW+1))
done

test $WINDOW -gt 0 && tmux set-window-option -t "${TMUX_SESSION_NAME}" synchronize-panes on
test $WINDOW -gt 0 && tmux select-layout -t "${TMUX_SESSION_NAME}" "${TMUX_LAYOUT}"
test "$OPTION_AFTER" != "null" && eval "$OPTION_AFTER"
